// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: RAID1System.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileStreamServiceClient is the client API for FileStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileStreamServiceClient interface {
	SendFileInfo(ctx context.Context, opts ...grpc.CallOption) (FileStreamService_SendFileInfoClient, error)
	StreamFile(ctx context.Context, opts ...grpc.CallOption) (FileStreamService_StreamFileClient, error)
}

type fileStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileStreamServiceClient(cc grpc.ClientConnInterface) FileStreamServiceClient {
	return &fileStreamServiceClient{cc}
}

func (c *fileStreamServiceClient) SendFileInfo(ctx context.Context, opts ...grpc.CallOption) (FileStreamService_SendFileInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileStreamService_ServiceDesc.Streams[0], "/FileStreamService/SendFileInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileStreamServiceSendFileInfoClient{stream}
	return x, nil
}

type FileStreamService_SendFileInfoClient interface {
	Send(*FileInfo) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type fileStreamServiceSendFileInfoClient struct {
	grpc.ClientStream
}

func (x *fileStreamServiceSendFileInfoClient) Send(m *FileInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileStreamServiceSendFileInfoClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileStreamServiceClient) StreamFile(ctx context.Context, opts ...grpc.CallOption) (FileStreamService_StreamFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileStreamService_ServiceDesc.Streams[1], "/FileStreamService/StreamFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileStreamServiceStreamFileClient{stream}
	return x, nil
}

type FileStreamService_StreamFileClient interface {
	Send(*FileStreamRequest) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type fileStreamServiceStreamFileClient struct {
	grpc.ClientStream
}

func (x *fileStreamServiceStreamFileClient) Send(m *FileStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileStreamServiceStreamFileClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileStreamServiceServer is the server API for FileStreamService service.
// All implementations must embed UnimplementedFileStreamServiceServer
// for forward compatibility
type FileStreamServiceServer interface {
	SendFileInfo(FileStreamService_SendFileInfoServer) error
	StreamFile(FileStreamService_StreamFileServer) error
	mustEmbedUnimplementedFileStreamServiceServer()
}

// UnimplementedFileStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileStreamServiceServer struct {
}

func (UnimplementedFileStreamServiceServer) SendFileInfo(FileStreamService_SendFileInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFileInfo not implemented")
}
func (UnimplementedFileStreamServiceServer) StreamFile(FileStreamService_StreamFileServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamFile not implemented")
}
func (UnimplementedFileStreamServiceServer) mustEmbedUnimplementedFileStreamServiceServer() {}

// UnsafeFileStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileStreamServiceServer will
// result in compilation errors.
type UnsafeFileStreamServiceServer interface {
	mustEmbedUnimplementedFileStreamServiceServer()
}

func RegisterFileStreamServiceServer(s grpc.ServiceRegistrar, srv FileStreamServiceServer) {
	s.RegisterService(&FileStreamService_ServiceDesc, srv)
}

func _FileStreamService_SendFileInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileStreamServiceServer).SendFileInfo(&fileStreamServiceSendFileInfoServer{stream})
}

type FileStreamService_SendFileInfoServer interface {
	SendAndClose(*Ack) error
	Recv() (*FileInfo, error)
	grpc.ServerStream
}

type fileStreamServiceSendFileInfoServer struct {
	grpc.ServerStream
}

func (x *fileStreamServiceSendFileInfoServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileStreamServiceSendFileInfoServer) Recv() (*FileInfo, error) {
	m := new(FileInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileStreamService_StreamFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileStreamServiceServer).StreamFile(&fileStreamServiceStreamFileServer{stream})
}

type FileStreamService_StreamFileServer interface {
	SendAndClose(*Ack) error
	Recv() (*FileStreamRequest, error)
	grpc.ServerStream
}

type fileStreamServiceStreamFileServer struct {
	grpc.ServerStream
}

func (x *fileStreamServiceStreamFileServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileStreamServiceStreamFileServer) Recv() (*FileStreamRequest, error) {
	m := new(FileStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileStreamService_ServiceDesc is the grpc.ServiceDesc for FileStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileStreamService",
	HandlerType: (*FileStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendFileInfo",
			Handler:       _FileStreamService_SendFileInfo_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamFile",
			Handler:       _FileStreamService_StreamFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "RAID1System.proto",
}
